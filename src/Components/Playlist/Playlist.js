import axios from 'axios'
import React, { useEffect, useState } from 'react'
import './Playlist.css';
import { useDispatch } from 'react-redux';
import { handleChange } from '../../redux/track';
import Avatar from '@mui/material/Avatar';
import { Button, IconButton, Stack } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import PlayCircleIcon from '@mui/icons-material/PlayCircle';
import Lottie from 'react-lottie';
import loadList from '../../lotties/loadlist.json';
import ProfilePic from "../media/dp.jpg";

function shuffle(array){
    let currentIndex = array.length, randomIndex;
    while(currentIndex!==0){
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]
    }
    return array
}

export default function Playlist({model, playlist, setIsPlaylist}) {

    const [songs, setSongs] = useState([])
    const [error,setError] =useState(false)
    const dispatch = useDispatch();

    useEffect(() => {
        if(model==="M1"){
            model = "Model1"
        }
        else{
            model="Model2"
        }

        axios.get(`https://vibyapi.herokuapp.com/Playlist/${model}?mood=${playlist}`).then((res)=>{
            setSongs(shuffle(res.data))
            setError(false)
        })
        .catch((err) => {
            setError(true)
            setSongs([])
        })
    },[])

    return (
    <div className='root'>
        <div className='musiclist__searchbar'>
            <div className='musiclist__searchbar__left'>
                <SearchIcon/>
                <input placeholder='Search for Artists, Songs, or Playlists' type='text'/>
            </div>
            <div className='musiclist__searchbar__right'>
                <Avatar alt="Remy Sharp" src={ProfilePic}/>
                <h4>Rithik Dutt</h4>
            </div>
        </div>
        <IconButton onClick={() => setIsPlaylist(false)} fontSize='large' sx={{backgroundColor: '#3f51b5', color: 'white'}}>
            <ArrowBackIcon/>
        </IconButton>
        <div style={{padding: '3%'}}>
            <h1>{playlist} Playlist Generated by {model}</h1>
            <table>
                <thead>
                    <tr className='table-header'>
                        <th>#</th>
                        <th>Title</th>
                        <th>Artist</th>
                        <th>Album</th>
                        <th>Play</th>
                    </tr>
                </thead>
                <tbody>
            {songs.length>0 && songs.slice(0,100).map((song,index)=>{
                return(
                        <tr key={index}>
                        <td>
                            {index+1}
                        </td>
                        <td>
                            <div className='title'>
                            <img className="album-cover" src={song.album_cover} alt="album-cover"/>
                            {song.track_name}
                            </div>
                        </td>
                        <td>
                            {song.artist_name}
                        </td>
                        <td>
                            {song.album_name}
                        </td>
                        <td>
                            <div className='play'>
                            <Stack direction='row' spacing={2}>
                                {song.preview_link!=="null" && <Button variant='contained' fontSize='small' fullWidth  onClick={() => {
                                    // clickPlay(props.props.preview_link);
                                    dispatch(handleChange({
                                        album_cover: song.album_cover,
                                        album_name: song.album_name,
                                        artist_name: song.artist_name,
                                        preview_link: song.preview_link,
                                    }));
                                    }} startIcon={<PlayCircleIcon/>}>Listen</Button>
                                }
                                <a href={song.spotify_link} target='_blank' style={{'textDecoration':'none', width: '100%', 'textAlign': 'center'}}>
                                    <Button variant='contained' sx={{backgroundColor: '#1DB954'}} fullWidth startIcon={<OpenInNewIcon/>}>Spotify</Button>
                                </a>
                            </Stack>
                            </div>
                        </td>
                    </tr>
                )
                
            })}
            {songs.length === 0 && <div>
                <Lottie
                    options={
                        {
                            loop: true,
                            autoplay: true,
                            animationData: loadList,
                            rendererSettings: {
                                preserveAspectRatio: 'xMidYMid slice',
                            },
                        }
                    }
                    height={350}
                    width={350}
                />
            </div>}
            </tbody>
            </table>
            {error && <h1>Loading...</h1>}
        </div>
    </div>
    )
}